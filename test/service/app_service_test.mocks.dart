// Mocks generated by Mockito 5.2.0 from annotations
// in odinote/test/app_service_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:odinote/models/task.dart' as _i3;
import 'package:odinote/service/app_service.dart' as _i4;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDatabase_0 extends _i1.Fake implements _i2.Database {}

class _FakeTask_1 extends _i1.Fake implements _i3.Task {}

/// A class which mocks [TaskService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskService extends _i1.Mock implements _i4.TaskService {
  MockTaskService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Database get db => (super.noSuchMethod(Invocation.getter(#db),
      returnValue: _FakeDatabase_0()) as _i2.Database);
  @override
  set db(_i2.Database? _db) => super.noSuchMethod(Invocation.setter(#db, _db),
      returnValueForMissingStub: null);
  @override
  _i5.Future<dynamic> initialize(String? path) =>
      (super.noSuchMethod(Invocation.method(#initialize, [path]),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  _i5.Future<_i3.Task> insert(_i3.Task? task) =>
      (super.noSuchMethod(Invocation.method(#insert, [task]),
              returnValue: Future<_i3.Task>.value(_FakeTask_1()))
          as _i5.Future<_i3.Task>);
  @override
  _i5.Future<List<_i3.Task>?> getAllTask() =>
      (super.noSuchMethod(Invocation.method(#getAllTask, []),
              returnValue: Future<List<_i3.Task>?>.value())
          as _i5.Future<List<_i3.Task>?>);
  @override
  _i5.Future<_i3.Task?> getTask(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTask, [id]),
          returnValue: Future<_i3.Task?>.value()) as _i5.Future<_i3.Task?>);
  @override
  _i5.Future<int?> delete(int? id) =>
      (super.noSuchMethod(Invocation.method(#delete, [id]),
          returnValue: Future<int?>.value()) as _i5.Future<int?>);
  @override
  _i5.Future<int?> update(_i3.Task? task) =>
      (super.noSuchMethod(Invocation.method(#update, [task]),
          returnValue: Future<int?>.value()) as _i5.Future<int?>);
  @override
  _i5.Future<dynamic> close() =>
      (super.noSuchMethod(Invocation.method(#close, []),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
}
